name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  precheck:
    runs-on: ubuntu-latest
    container: python:3.9
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8 linting
        run: flake8 .

  # build:
  #   runs-on: ubuntu-latest
  #   services:
  #     docker:
  #       image: docker:latest
  #       options: --privileged
  #       env:
  #         DOCKER_HOST: tcp://localhost:2376
  #         DOCKER_TLS_CERTDIR: "/certs"
  #       ports:
  #         - 2376:2376
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Login to Docker Registry
  #       run: echo "${{ secrets.CI_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.CI_REGISTRY_USER }}" --password-stdin ${{ secrets.CI_REGISTRY }}

  #     - name: Build and Push Docker Image
  #       env:
  #         CONTAINER_TEST_IMAGE: ${{ secrets.CI_REGISTRY_IMAGE }}:${{ github.ref_name }}
  #       run: |
  #         docker build --pull -t $CONTAINER_TEST_IMAGE -f docker/Dockerfile-optimized .
  #         docker push $CONTAINER_TEST_IMAGE
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

  # release-image:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   services:
  #     docker:
  #       image: docker:latest
  #       options: --privileged
  #       env:
  #         DOCKER_HOST: tcp://localhost:2376
  #         DOCKER_TLS_CERTDIR: "/certs"
  #       ports:
  #         - 2376:2376
  #   steps:
  #     - name: Login to Docker Registry
  #       run: echo "${{ secrets.CI_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.CI_REGISTRY_USER }}" --password-stdin ${{ secrets.CI_REGISTRY }}

  #     - name: Pull, Tag, and Push Release Image
  #       env:
  #         CONTAINER_TEST_IMAGE: ${{ secrets.CI_REGISTRY_IMAGE }}:${{ github.ref_name }}
  #         CONTAINER_RELEASE_IMAGE: ${{ secrets.CI_REGISTRY_IMAGE }}:${{ github.ref_name }}-passed
  #       run: |
  #         docker pull $CONTAINER_TEST_IMAGE
  #         docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
  #         docker push $CONTAINER_RELEASE_IMAGE
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

  # changelog:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: orhunp/git-cliff:latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Full clone to ensure git history is complete

  #     - name: Generate Changelog
  #       run: git-cliff -r . > CHANGELOG.md

  #     - name: Upload Changelog as Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: CHANGELOG
  #         path: CHANGELOG.md
  #       if: github.event_name == 'push' && github.ref_name == 'main' && startsWith(github.ref, 'refs/tags/')

  # deploy-app-stage:
  #   runs-on: ubuntu-latest
  #   container: orsidev/rancher2-cli-gitlab:2.8.0
  #   if: github.ref_name == 'main'
  #   steps:
  #     - name: Login to Rancher
  #       env:
  #         RANCHER_HOST: ${{ secrets.RANCHER_HOST }}
  #         RANCHER_KEY: ${{ secrets.RANCHER_KEY }}
  #         RANCHER_CONTEXT: ${{ secrets.RANCHER_CONTEXT }}
  #       run: rancher login $RANCHER_HOST --token $RANCHER_KEY --context $RANCHER_CONTEXT

  #     - name: Deploy to Kubernetes
  #       env:
  #         DEPLOYMENT_PATCH: |
  #           {"spec": {"template": {"spec": {"containers": [{"name": "connector","image": "registry.gitlab.com/you-ai/rasa-youai-connector:${{ github.ref_name }}" }]}}}}
  #       run: rancher kubectl --namespace=default patch deployment connector --patch "$DEPLOYMENT_PATCH"
